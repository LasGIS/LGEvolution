Это описание файлов, по которым можно создать стратегию животного.

КЛЮЧЕВЫЕ СЛОВА:
   routine  - определяет тип "стратегия животного"
   function - определение функции;

1. ОПИСАНИЕ ЯЗЫКА:
1.1. ОПРЕДЕЛЕНИЕ СТРАТЕГИИ ЖИВОТНОГО

1.1.1 ДЕКЛАРАЦИЯ СТРАТЕГИИ БЕЗ ЕЁ ОПРЕДЕЛЕНИЯ:
    синтаксис:

        RoutineDefinition: routine <RoutineIdentifier> ([<ParameterName>[, <ParameterName>]])
        [<ParameterName>[, <ParameterName>]];

        RoutineIdentifier = <identifier>  /Имя стратегии обязательно соответствует имени java класса/

        ParameterName = <identifier>      /Имя параметра/

        identifier = /Русские и английские символы как большие, так и маленькие, цифры (кроме первого знака), знак '_'/

    Декларация стратегии без её определения применяется в случае если стратегия уже написана на JAVA.
    Имя стратегии должно соответствовать классу, наследуемому от интерфейса "com.lasgis.evolution.object.animal.brain.Routine".
    В круглых скобках описываются входящие параметры, а за скобками - исходящие параметры.
    Значение параметров не влияет на ход компиляции или исполнения и нужны для правильного понимания,
    что означает данный параметер. Кроме этого параметры используются компилятором стратегии для проверки
    правильного использования

    примеры:
        FindFood(текущие_координаты, область_поиска) ячейка_c_едой, название_еды;

1.1.2 ДЕКЛАРАЦИЯ СТРАТЕГИИ C ОПРЕДЕЛЕНИЕМ:
    синтаксис:

        RoutineDefinition: routine <RoutineIdentifier> ([<ParameterName>[, <ParameterName>]])
        [<ParameterName>[, <ParameterName>]] {
            Statement;
            [Statement;]
        }

        RoutineIdentifier = <identifier>  /Имя стратегии/

        Statement = /вызов стратегии | присвоение параметра/

    Декларация стратегии с определением нужна применяется в случае если стратегия уже написана на JAVA.
    Имя стратегии должно соответствовать классу, наследуемому от интерфейса "com.lasgis.evolution.object.animal.brain.Routine".
    В круглых скобках описываются входящие параметры, а за скобками - исходящие параметры.
    Значение параметров не влияет на ход компиляции или исполнения и нужны для правильного понимания,
    что означает данный параметер. Кроме этого параметры используются компилятором стратегии для проверки
    правильного использования

    примеры:
        routine DineRout {
            FindFood() ячейка_c_едой, название_еды;
            RunTo(ячейка_c_едой);
            Dine(название_еды);
            Birth();
        }

1.1.3 ВЫЗОВ СТРАТЕГИИ:
    синтаксис:

        RoutineDefinition: <RoutineIdentifier> ([[<ParameterName>], [<ParameterName>]]) [[<ParameterName>], [<ParameterName>]];

    Вызов стратегии описывается только внутри определения другой стратегии. Это описание по сути определяет
    последовательность вызова стратегий при выполнении данной стратегии. Стратегия должна быть задекларирована
    (как java класс или как "декларация стратегии c определением").

    примеры:
        FindFood(текущие_координаты, область_поиска) ячейка_c_едой, название_еды;

1.1.4 ПРИСВОЕНИЕ ПАРАМЕТРА:
    синтаксис:
        ParameterAssignment: <ParameterName> = Statement

        Statement = [<ParameterName> | операции | вызов функции | константа ]*

        операции: [+|-|*|/|(|)]

        константа: целое число | вещественное число | "строка"

    Здесь имеется в виду изменение значения параметра. Мы знаем только имя параметра. Значение параметра находится
    в куче параметров (это просто некоторый мапинг названия на значение "Map<String,Object> map", а реально это
    класс javax.script.SimpleBindings).


    примеры:
        текущие_координаты = предыдущие_координаты + смещение;


1.2. ОПРЕДЕЛЕНИЕ ФУНКЦИИ